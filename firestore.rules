rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      // Admins are identified by their phone number being in the 'admins' collection.
      return request.auth.token.phone_number != null && 
             exists(/databases/$(database)/documents/admins/$(request.auth.token.phone_number));
    }

    // Allow admins to list all users (required for admin dashboard)
    match /users {
      allow list: if isAdmin();
    }

    // Rule for a user to access their own data, including their subcollections
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow admins to read user data for the admin panel
      allow read: if isAdmin();
      
      // Allow all subcollections access for users and admins
      match /{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        allow read: if isAdmin();
      }
    }

    // Rule to allow any authenticated user to check if a number belongs to an admin
    match /admins/{phoneNumber} {
      allow read: if request.auth != null;
    }
    
    // Rules for vaccine products with categories
    match /products/{productId} {
      // Any authenticated user can read product info (e.g., for booking)
      allow read: if request.auth != null;
      // Only admins can create, update, or delete products
      allow create, update, delete: if isAdmin();
    }

    // Rules for booking slots
    match /bookingSlots/{slotId} {
      // Any authenticated user can read available slots
      allow read: if request.auth != null;
      
      // Admins can create and delete slots
      allow create, delete: if isAdmin();
      
      // Rules for updating slots
      allow update: if 
        // Admins can update any field on a slot
        isAdmin() ||
        // A regular user can update a slot only to book it
        (
          request.auth != null &&
          resource.data.isBooked == false && // The slot must be available
          request.resource.data.isBooked == true && // It can only be changed to 'booked'
          request.resource.data.bookedBy == request.auth.uid && // The user must book it for themselves
          request.resource.data.keys().hasAll(['isBooked', 'bookedBy']) && // Only these fields can be updated
          request.resource.data.keys().hasOnly(['isBooked', 'bookedBy', 'transactionId']) // Prevent updating other fields
        );
    }
    
    // This rule is CRUCIAL for the Admin "All Bookings" table.
    // It allows an admin to perform a collection group query across all subcollections.
    match /{path=**}/transactions/{transactionId} {
      allow read: if isAdmin();
    }
    
    // Allow admins to read all dogs data for transaction details
    match /{path=**}/dogs/{dogId} {
      allow read: if isAdmin();
    }
    
    // Allow admins to read all reminders data if needed for support
    match /{path=**}/reminders/{reminderId} {
      allow read: if isAdmin();
    }

    // Allow admins to read all orders data for order management
    match /{path=**}/orders/{orderId} {
      allow read: if isAdmin();
    }

    // Rules for shop categories
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Rules for shop products
    match /shopProducts/{productId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
  }
}