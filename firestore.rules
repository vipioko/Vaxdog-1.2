rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      // Admins are identified by their phone number being in the 'admins' collection.
      return request.auth.token.phone_number != null && 
             exists(/databases/$(database)/documents/admins/$(request.auth.token.phone_number));
    }

    // Helper function to check if the requesting user is a doctor
    function isDoctor() {
      // Doctors are identified by their UID being in the 'doctors' collection.
      return request.auth.uid != null && 
             exists(/databases/$(database)/documents/doctors/$(request.auth.uid));
    }

    // Allow admins to list all users (required for admin dashboard)
    match /users {
      allow list: if isAdmin();
    }

    // Rule for a user to access their own data, including their subcollections
    // This rule correctly handles the creation of documents in subcollections like 'transactions'.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow admins to read user data for the admin panel
      allow read: if isAdmin();
      
      // Allow all subcollections access for users and admins
      match /{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        allow read, write: if isAdmin();
      }
    }

    // Rule to allow any authenticated user to check if a number belongs to an admin
    match /admins/{phoneNumber} {
      allow read: if request.auth != null;
    }

    // Rules for the doctors collection
    match /doctors/{doctorId} {
      allow read, write: if (request.auth != null && request.auth.uid == doctorId) || isAdmin();
    }

    // Rules for doctor's services subcollection
    match /doctors/{doctorId}/services/{serviceId} {
      allow read, write: if (request.auth != null && request.auth.uid == doctorId) || isAdmin();
    }
    
    // Rules for vaccine products with categories
    match /products/{productId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Rules for booking slots
    match /bookingSlots/{slotId} {
      allow read: if request.auth != null;
      
      allow create, delete: if isAdmin();
      
      // This is the key rule for the booking transaction.
      allow update: if
        isAdmin() || 
        (
          request.auth != null &&
          resource.data.isBooked == false && 
          request.resource.data.isBooked == true && 
          request.resource.data.bookedBy == request.auth.uid && 
          request.resource.data.keys().hasOnly(['isBooked', 'bookedBy', 'transactionId'])
        );
    }
    
    // This rule allows admins/doctors to perform a collection group query across all transactions.
    match /{path=**}/transactions/{transactionId} {
      // Combined read permissions for clarity
      allow read: if isAdmin() || (isDoctor() && resource.data.assignedDoctorId == request.auth.uid);
      // NOTE: An 'allow create' rule here is redundant and has been removed.
      // The `match /users/{userId}` rule above correctly and more securely handles create permission.
    }
    
    // Allow admins to read all dogs data for transaction details
    match /{path=**}/dogs/{dogId} {
      allow read: if isAdmin();
    }
    
    // Allow admins to read all reminders data if needed for support
    match /{path=**}/reminders/{reminderId} {
      allow read: if isAdmin();
    }

    // Allow admins to read all orders data for order management
    match /{path=**}/orders/{orderId} {
      allow read: if isAdmin();
    }

    // Rules for shop categories
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Rules for shop products
    match /shopProducts/{productId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
  }
}